components:
  examples:
    error_response:
      summary: Respuesta de error JSON-RPC
      value:
        error:
          code: -32603
          data:
            details: "No se encontr\xF3 la ubicaci\xF3n especificada"
          message: Error interno del servidor
        id: weather-001
        jsonrpc: '2.0'
    get_current_weather_request:
      summary: Solicitud de clima actual
      value:
        id: weather-001
        jsonrpc: '2.0'
        method: get_current_weather
        params:
          location: Madrid
    get_current_weather_response:
      summary: Respuesta de clima actual
      value:
        id: weather-001
        jsonrpc: '2.0'
        result:
          current_weather:
            humidity: 65.0
            temperature: 24.0
            timestamp: '2025-06-13T22:00:00Z'
            weather_condition: partly_cloudy
          location:
            country: "Espa\xF1a"
            latitude: 40.4165
            longitude: -3.70256
            name: Madrid
          status: success
    search_locations_request:
      summary: "Solicitud de b\xFAsqueda de ubicaciones"
      value:
        id: search-001
        jsonrpc: '2.0'
        method: search_locations
        params:
          limit: 3
          query: Barcelona
    submit_task_request:
      summary: "Env\xEDo de tarea as\xEDncrona"
      value:
        id: task-001
        jsonrpc: '2.0'
        method: submit_task
        params:
          capability: get_current_weather
          input_data:
            location: Tokyo
  schemas:
    AgentCard:
      properties:
        agent:
          properties:
            capabilities:
              items:
                $ref: '#/components/schemas/Capability'
              type: array
            description:
              type: string
            id:
              type: string
            name:
              type: string
            version:
              type: string
          type: object
      type: object
    Capability:
      properties:
        description:
          type: string
        examples:
          items:
            type: object
          type: array
        input_schema:
          type: object
        name:
          type: string
        output_schema:
          type: object
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    JSONRPCError:
      properties:
        code:
          type: integer
        data:
          type: object
        message:
          type: string
      required:
      - code
      - message
      type: object
    JSONRPCRequest:
      properties:
        id:
          oneOf:
          - type: string
          - type: number
          - type: 'null'
        jsonrpc:
          enum:
          - '2.0'
          type: string
        method:
          type: string
        params:
          type: object
      required:
      - jsonrpc
      - method
      type: object
    JSONRPCResponse:
      properties:
        error:
          $ref: '#/components/schemas/JSONRPCError'
        id:
          oneOf:
          - type: string
          - type: number
          - type: 'null'
        jsonrpc:
          enum:
          - '2.0'
          type: string
        result:
          type: object
      required:
      - jsonrpc
      type: object
    Location:
      properties:
        country:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        name:
          type: string
        region:
          type: string
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
    WeatherData:
      properties:
        humidity:
          type: number
        pressure:
          type: number
        temperature:
          type: number
        timestamp:
          format: date-time
          type: string
        weather_condition:
          type: string
        wind_speed:
          type: number
      type: object
info:
  contact:
    email: support@weather-agent.com
    name: Weather Agent Support
    url: https://weather-agent.com/support
  description: "\n# Weather Agent A2A API\n\nAPI completa para comunicaci\xF3n Agent-to-Agent\
    \ (A2A) del agente meteorol\xF3gico.\n\n## Caracter\xEDsticas\n\n- **JSON-RPC\
    \ 2.0**: Protocolo est\xE1ndar para comunicaci\xF3n entre agentes\n- **Agent Discovery**:\
    \ Descubrimiento autom\xE1tico mediante Agent Card\n- **Capacidades Meteorol\xF3\
    gicas**: Clima actual, pron\xF3sticos y b\xFAsqueda de ubicaciones\n- **Gesti\xF3\
    n de Tareas**: Ejecuci\xF3n as\xEDncrona de operaciones complejas\n- **Monitoreo**:\
    \ Health checks y m\xE9tricas de rendimiento\n\n## Flujo de Comunicaci\xF3n A2A\n\
    \n1. **Descubrimiento**: GET `/.well-known/agent.json`\n2. **Capacidades**: POST\
    \ `/rpc` con m\xE9todo `get_capabilities`\n3. **Ejecuci\xF3n**: POST `/rpc` con\
    \ capacidades espec\xEDficas\n4. **Monitoreo**: GET `/health` y `/status`\n\n\
    ## Autenticaci\xF3n\n\nActualmente no se requiere autenticaci\xF3n. En producci\xF3\
    n se recomienda:\n- API Keys para agentes registrados\n- OAuth 2.0 para aplicaciones\
    \ cliente\n- mTLS para comunicaci\xF3n segura entre agentes\n\n## Rate Limiting\n\
    \n- **Desarrollo**: Sin l\xEDmites\n- **Producci\xF3n**: 100 requests/minuto por\
    \ agente\n        "
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Weather Agent A2A API
  version: 1.0.0
openapi: 3.1.0
paths:
  /.well-known/agent.json:
    get:
      description: Endpoint de descubrimiento A2A.
      operationId: get_agent_card__well_known_agent_json_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Agent Card
  /health:
    get:
      description: Endpoint de salud del agente.
      operationId: health_check_health_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Health Check
  /rpc:
    post:
      description: Endpoint principal JSON-RPC 2.0.
      operationId: handle_rpc_rpc_post
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Handle Rpc
  /status:
    get:
      description: Endpoint de estado del agente.
      operationId: get_status_status_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Status
  /tasks:
    get:
      description: Obtener lista de tareas.
      operationId: get_tasks_tasks_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Tasks
  /tasks/{task_id}:
    get:
      description: "Obtener estado de una tarea espec\xEDfica."
      operationId: get_task_tasks__task_id__get
      parameters:
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Task
servers:
- description: Development server
  url: http://localhost:8001
- description: Production server
  url: https://api.weather-agent.com
tags:
- description: Endpoints para descubrimiento de agentes A2A
  name: Agent Discovery
- description: Endpoints de salud y estado del agente
  name: Health & Status
- description: "Comunicaci\xF3n JSON-RPC 2.0 entre agentes"
  name: JSON-RPC
- description: "Gesti\xF3n de tareas as\xEDncronas"
  name: Task Management
- description: "Capacidades meteorol\xF3gicas del agente"
  name: Weather Capabilities
